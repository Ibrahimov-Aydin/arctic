(() => {
  'use strict';
  let e = (e, t = 500, n = 0) => {
      e.classList.contains('_slide') ||
        (e.classList.add('_slide'),
        (e.style.transitionProperty = 'height, margin, padding'),
        (e.style.transitionDuration = t + 'ms'),
        (e.style.height = `${e.offsetHeight}px`),
        e.offsetHeight,
        (e.style.overflow = 'hidden'),
        (e.style.height = n ? `${n}px` : '0px'),
        (e.style.paddingTop = 0),
        (e.style.paddingBottom = 0),
        (e.style.marginTop = 0),
        (e.style.marginBottom = 0),
        window.setTimeout(() => {
          (e.hidden = !n),
            n || e.style.removeProperty('height'),
            e.style.removeProperty('padding-top'),
            e.style.removeProperty('padding-bottom'),
            e.style.removeProperty('margin-top'),
            e.style.removeProperty('margin-bottom'),
            n || e.style.removeProperty('overflow'),
            e.style.removeProperty('transition-duration'),
            e.style.removeProperty('transition-property'),
            e.classList.remove('_slide'),
            document.dispatchEvent(
              new CustomEvent('slideUpDone', { detail: { target: e } })
            );
        }, t));
    },
    t = (e, t = 500, n = 0) => {
      if (!e.classList.contains('_slide')) {
        e.classList.add('_slide'),
          (e.hidden = !e.hidden && null),
          n && e.style.removeProperty('height');
        let l = e.offsetHeight;
        (e.style.overflow = 'hidden'),
          (e.style.height = n ? `${n}px` : '0px'),
          (e.style.paddingTop = 0),
          (e.style.paddingBottom = 0),
          (e.style.marginTop = 0),
          (e.style.marginBottom = 0),
          e.offsetHeight,
          (e.style.transitionProperty = 'height, margin, padding'),
          (e.style.transitionDuration = t + 'ms'),
          (e.style.height = l + 'px'),
          e.style.removeProperty('padding-top'),
          e.style.removeProperty('padding-bottom'),
          e.style.removeProperty('margin-top'),
          e.style.removeProperty('margin-bottom'),
          window.setTimeout(() => {
            e.style.removeProperty('height'),
              e.style.removeProperty('overflow'),
              e.style.removeProperty('transition-duration'),
              e.style.removeProperty('transition-property'),
              e.classList.remove('_slide'),
              document.dispatchEvent(
                new CustomEvent('slideDownDone', { detail: { target: e } })
              );
          }, t);
      }
    },
    n = (n, l = 500) => (n.hidden ? t(n, l) : e(n, l)),
    l = !0,
    o = (e = 500) => {
      let t = document.querySelector('body');
      if (l) {
        let n = document.querySelectorAll('[data-lp]');
        setTimeout(() => {
          for (let e = 0; e < n.length; e++) {
            let l = n[e];
            l.style.paddingRight = '0px';
          }
          (t.style.paddingRight = '0px'),
            document.documentElement.classList.remove('lock');
        }, e),
          (l = !1),
          setTimeout(function () {
            l = !0;
          }, e);
      }
    },
    i = (e = 500) => {
      let t = document.querySelector('body');
      if (l) {
        let n = document.querySelectorAll('[data-lp]');
        for (let o = 0; o < n.length; o++) {
          let i = n[o];
          i.style.paddingRight =
            window.innerWidth -
            document.querySelector('.wrapper').offsetWidth +
            'px';
        }
        (t.style.paddingRight =
          window.innerWidth -
          document.querySelector('.wrapper').offsetWidth +
          'px'),
          document.documentElement.classList.add('lock'),
          (l = !1),
          setTimeout(function () {
            l = !0;
          }, e);
      }
    };
  function a() {
    let t = document.querySelectorAll('[data-spollers]');
    if (t.length > 0) {
      let l = Array.from(t).filter(function (e, t, n) {
        return !e.dataset.spollers.split(',')[0];
      });
      l.length && i(l);
      let o = d(t, 'spollers');
      function i(e, t = !1) {
        e.forEach((e) => {
          (e = t ? e.item : e),
            t.matches || !t
              ? (e.classList.add('_spoller-init'),
                a(e),
                e.addEventListener('click', s))
              : (e.classList.remove('_spoller-init'),
                a(e, !1),
                e.removeEventListener('click', s));
        });
      }
      function a(e, t = !0) {
        let n = e.querySelectorAll('[data-spoller]');
        n.length &&
          (n = Array.from(n).filter(
            (t) => t.closest('[data-spollers]') === e
          )).forEach((e) => {
            t
              ? (e.removeAttribute('tabindex'),
                e.classList.contains('_spoller-active') ||
                  (e.nextElementSibling.hidden = !0))
              : (e.setAttribute('tabindex', '-1'),
                (e.nextElementSibling.hidden = !1));
          });
      }
      function s(t) {
        let l = t.target;
        if (l.closest('[data-spoller]')) {
          let o = l.closest('[data-spoller]'),
            i = o.closest('[data-spollers]'),
            a = i.hasAttribute('data-one-spoller'),
            s = i.dataset.spollersSpeed
              ? parseInt(i.dataset.spollersSpeed)
              : 500;
          i.querySelectorAll('._slide').length ||
            (a &&
              !o.classList.contains('_spoller-active') &&
              (function t(n) {
                let l = n.querySelector('[data-spoller]._spoller-active'),
                  o = n.dataset.spollersSpeed
                    ? parseInt(n.dataset.spollersSpeed)
                    : 500;
                l &&
                  !n.querySelectorAll('._slide').length &&
                  (l.classList.remove('_spoller-active'),
                  e(l.nextElementSibling, o));
              })(i),
            o.classList.toggle('_spoller-active'),
            n(o.nextElementSibling, s)),
            t.preventDefault();
        }
      }
      o &&
        o.length &&
        o.forEach((e) => {
          e.matchMedia.addEventListener('change', function () {
            i(e.itemsArray, e.matchMedia);
          }),
            i(e.itemsArray, e.matchMedia);
        });
      let r = document.querySelectorAll('[data-spoller-close]');
      r.length &&
        document.addEventListener('click', function (t) {
          let n = t.target;
          n.closest('[data-spollers]') ||
            r.forEach((t) => {
              let n = t.closest('[data-spollers]');
              if (n.classList.contains('_spoller-init')) {
                let l = n.dataset.spollersSpeed
                  ? parseInt(n.dataset.spollersSpeed)
                  : 500;
                t.classList.remove('_spoller-active'),
                  e(t.nextElementSibling, l);
              }
            });
        });
    }
  }
  function s() {
    i(), document.documentElement.classList.add('menu-open');
  }
  function r() {
    o(), document.documentElement.classList.remove('menu-open');
  }
  function c(e) {
    return e.filter(function (e, t, n) {
      return n.indexOf(e) === t;
    });
  }
  function d(e, t) {
    let n = Array.from(e).filter(function (e, n, l) {
      if (e.dataset[t]) return e.dataset[t].split(',')[0];
    });
    if (n.length) {
      let l = [];
      n.forEach((e) => {
        let n = e.dataset[t],
          o = {},
          i = n.split(',');
        (o.value = i[0]),
          (o.type = i[1] ? i[1].trim() : 'max'),
          (o.item = e),
          l.push(o);
      });
      let o = l.map(function (e) {
        return (
          '(' + e.type + '-width: ' + e.value + 'px),' + e.value + ',' + e.type
        );
      });
      o = c(o);
      let i = [];
      if (o.length)
        return (
          o.forEach((e) => {
            let t = e.split(','),
              n = t[1],
              o = t[2],
              a = window.matchMedia(t[0]),
              s = l.filter(function (e) {
                if (e.value === n && e.type === o) return !0;
              });
            i.push({ itemsArray: s, matchMedia: a });
          }),
          i
        );
    }
  }
  let p = !1;
  function u() {
    p = !0;
    let e = document.querySelector('header.header'),
      t = e.hasAttribute('data-scroll-show'),
      n = e.dataset.scrollShow ? e.dataset.scrollShow : 500,
      l = e.dataset.scroll ? e.dataset.scroll : 1,
      o = 0,
      i;
    document.addEventListener('windowScroll', function (a) {
      let s = window.scrollY;
      clearTimeout(i),
        s >= l
          ? (e.classList.contains('_header-scroll') ||
              e.classList.add('_header-scroll'),
            t &&
              (s > o
                ? e.classList.contains('_header-show') &&
                  e.classList.remove('_header-show')
                : e.classList.contains('_header-show') ||
                  e.classList.add('_header-show'),
              (i = setTimeout(() => {
                e.classList.contains('_header-show') ||
                  e.classList.add('_header-show');
              }, n))))
          : (e.classList.contains('_header-scroll') &&
              e.classList.remove('_header-scroll'),
            t &&
              e.classList.contains('_header-show') &&
              e.classList.remove('_header-show')),
        (o = s <= 0 ? 0 : s);
    });
  }
  setTimeout(() => {
    if (p) {
      let e = new Event('windowScroll');
      window.addEventListener('scroll', function (t) {
        document.dispatchEvent(e);
      });
    }
  }, 0);
  class m {
    constructor(e) {
      this.type = e;
    }
    init() {
      (this.Ð¾bjects = []),
        (this.daClassname = '_dynamic_adapt_'),
        (this.nodes = [...document.querySelectorAll('[data-da]')]),
        this.nodes.forEach((e) => {
          let t = e.dataset.da.trim(),
            n = t.split(','),
            l = {};
          (l.element = e),
            (l.parent = e.parentNode),
            (l.destination = document.querySelector(`${n[0].trim()}`)),
            (l.breakpoint = n[1] ? n[1].trim() : '767'),
            (l.place = n[2] ? n[2].trim() : 'last'),
            (l.index = this.indexInParent(l.parent, l.element)),
            this.Ð¾bjects.push(l);
        }),
        this.arraySort(this.Ð¾bjects),
        (this.mediaQueries = this.Ð¾bjects
          .map(({ breakpoint: e }) => `(${this.type}-width: ${e}px),${e}`)
          .filter((e, t, n) => n.indexOf(e) === t)),
        this.mediaQueries.forEach((e) => {
          let t = e.split(','),
            n = window.matchMedia(t[0]),
            l = t[1],
            o = this.Ð¾bjects.filter(({ breakpoint: e }) => e === l);
          n.addEventListener('change', () => {
            this.mediaHandler(n, o);
          }),
            this.mediaHandler(n, o);
        });
    }
    mediaHandler(e, t) {
      e.matches
        ? t.forEach((e) => {
            this.moveTo(e.place, e.element, e.destination);
          })
        : t.forEach(({ parent: e, element: t, index: n }) => {
            t.classList.contains(this.daClassname) && this.moveBack(e, t, n);
          });
    }
    moveTo(e, t, n) {
      if (
        (t.classList.add(this.daClassname),
        'last' === e || e >= n.children.length)
      ) {
        n.append(t);
        return;
      }
      if ('first' === e) {
        n.prepend(t);
        return;
      }
      n.children[e].before(t);
    }
    moveBack(e, t, n) {
      t.classList.remove(this.daClassname),
        void 0 !== e.children[n] ? e.children[n].before(t) : e.append(t);
    }
    indexInParent(e, t) {
      return [...e.children].indexOf(t);
    }
    arraySort(e) {
      if ('min' === this.type)
        e.sort((e, t) =>
          e.breakpoint === t.breakpoint
            ? e.place === t.place
              ? 0
              : 'first' === e.place || 'last' === t.place
                ? -1
                : 'last' === e.place || 'first' === t.place
                  ? 1
                  : 0
            : e.breakpoint - t.breakpoint
        );
      else {
        e.sort((e, t) =>
          e.breakpoint === t.breakpoint
            ? e.place === t.place
              ? 0
              : 'first' === e.place || 'last' === t.place
                ? 1
                : 'last' === e.place || 'first' === t.place
                  ? -1
                  : 0
            : t.breakpoint - e.breakpoint
        );
        return;
      }
    }
  }
  let h = new m('max');
  h.init();
  let g = document.getElementById('timeline');
  if (g) {
    let y = new Date(),
      f = new Date(y.getFullYear(), y.getMonth(), 1),
      v = new Date(y.getFullYear(), y.getMonth() + 1, 0),
      $ = new vis.DataSet([
        {
          id: 1,
          group: 1,
          content: '<span class="order-label">ÐÐ°ÐºÐ°Ð·</span> â5318',
          start: '2025-01-04',
          end: '2025-01-12',
        },
        {
          id: 2,
          group: 2,
          content: '<span class="order-label">ÐÐ°ÐºÐ°Ð·</span> â5318',
          start: '2025-01-01',
          end: '2025-01-09',
        },
        {
          id: 3,
          group: 3,
          content: '<span class="order-label">ÐÐ°ÐºÐ°Ð·</span> â5318',
          start: '2025-01-12',
          end: '2025-01-20',
        },
        {
          id: 5,
          group: 5,
          content: '<span class="order-label">ÐÐ°ÐºÐ°Ð·</span> â5318',
          start: '2025-02-01',
          end: '2025-02-28',
        },
      ]),
      b = new vis.DataSet([
        {
          id: 1,
          content:
            '<img src="/img/cars/skoda.png" alt="Skoda Kodiaq"> Skoda Kodiaq',
        },
        {
          id: 2,
          content: '<img src="/img/cars/bmw-x3.png" alt="BMW X3"> BMW X3',
        },
        {
          id: 3,
          content:
            '<img src="/img/cars/vw-golf.png" alt="Volkswagen Golf"> Volkswagen Golf',
        },
        {
          id: 4,
          content: '<img src="/img/cars/kia-rio.png" alt="Kia Rio"> Kia Rio',
        },
        {
          id: 5,
          content:
            '<img src="/img/cars/mercedes-gle.png" alt="Mercedes GLE"> Mercedes GLE',
        },
        {
          id: 6,
          content:
            '<img src="/img/cars/lada-vesta.png" alt="Lada Vesta"> Lada Vesta',
        },
      ]);
    function E(e, t) {
      let n = new Date(e);
      n.setDate(n.getDate() + 1);
      let l = t.getDate();
      return {
        start: n,
        end: t,
        min: n,
        max: t,
        zoomMin: 864e5 * l,
        zoomMax: 864e5 * l,
        moveable: !1,
        stack: !1,
        orientation: { axis: 'top' },
        timeAxis: { scale: 'day', step: 1 },
        showCurrentTime: !1,
        width: '100%',
        margin: { item: 10, axis: 10 },
        moment: function (e) {
          return vis.moment(e).startOf('day');
        },
      };
    }
    let L = E(f, v),
      _ = new vis.Timeline(g, $, b, L);
    function S() {
      k(f), x(f);
    }
    function w(e) {
      (f = new Date(f.getFullYear(), f.getMonth() + e, 1)),
        (v = new Date(f.getFullYear(), f.getMonth() + 1, 0));
      let t = E(f, v);
      _.setOptions(t),
        _.setWindow(t.start, t.end, { animation: !1 }),
        k(f),
        x(f);
    }
    function k(e) {
      document.getElementById('monthYear').textContent = e.toLocaleString(
        'ru-RU',
        { year: 'numeric', month: 'long' }
      );
    }
    function x(e) {
      let t = document.getElementById('daysRow');
      t.innerHTML = '';
      let n = new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate(),
        l = 100 / n;
      for (let o = 1; o <= n; o++) {
        let i = document.createElement('span');
        (i.textContent = o),
          (i.style.display = 'inline-block'),
          (i.style.width = `${l}%`),
          e.getFullYear() === y.getFullYear() &&
            e.getMonth() === y.getMonth() &&
            o === y.getDate() &&
            i.classList.add('current-day'),
          t.appendChild(i);
      }
    }
    S(),
      document
        .getElementById('prevMonthButton')
        .addEventListener('click', () => w(-1)),
      document
        .getElementById('nextMonthButton')
        .addEventListener('click', () => w(1));
  }
  let q = document.querySelector('.car-card');
  if (q) {
    let M = tns({
        container: '.my-slider',
        items: 1,
        slideBy: 'page',
        autoplay: !1,
        controls: !1,
        nav: !1,
        touch: !0,
        mouseDrag: !0,
        loop: !1,
        speed: 600,
      }),
      D,
      A = window.innerWidth >= 992;
    function P() {
      D && D.destroy(),
        (D = tns({
          container: '.my-thumbnails',
          items: 5,
          slideBy: 1,
          axis: A ? 'vertical' : 'horizontal',
          controls: !1,
          nav: !0,
          gutter: 8,
          autoplay: !1,
          touch: !0,
          mouseDrag: !0,
          loop: !1,
          speed: 600,
        })),
        T();
    }
    function C(e) {
      let t = document.querySelectorAll('.my-thumbnails .thumb');
      t.forEach((t, n) => {
        t.classList.toggle('active', n === e);
      });
    }
    function T() {
      let e = document.querySelectorAll('.my-thumbnails .thumb');
      e.forEach((e, t) => {
        e.addEventListener('click', () => {
          M.goTo(t);
        });
      });
    }
    M.events.on('indexChanged', (e) => {
      let t = e.displayIndex - 1;
      D.goTo(t), C(t);
    }),
      window.addEventListener('resize', () => {
        let e = window.innerWidth >= 992;
        e !== A && ((A = e), P());
      }),
      P(),
      C(0);
  }
  function B(e) {
    if (!Array.isArray(e)) return Array.from(e);
    for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
    return n;
  }
  var I = !1;
  if ('undefined' != typeof window) {
    var H = {
      get passive() {
        I = !0;
        return;
      },
    };
    window.addEventListener('testPassive', null, H),
      window.removeEventListener('testPassive', null, H);
  }
  var R =
      'undefined' != typeof window &&
      window.navigator &&
      window.navigator.platform &&
      (/iP(ad|hone|od)/.test(window.navigator.platform) ||
        ('MacIntel' === window.navigator.platform &&
          window.navigator.maxTouchPoints > 1)),
    W = [],
    O = !1,
    Y = -1,
    F = void 0,
    z = void 0,
    j = void 0,
    G = function e(t) {
      return W.some(function (e) {
        return !!(e.options.allowTouchMove && e.options.allowTouchMove(t));
      });
    },
    U = function e(t) {
      var n = t || window.event;
      return (
        !!G(n.target) ||
        n.touches.length > 1 ||
        (n.preventDefault && n.preventDefault(), !1)
      );
    },
    V = function e(t) {
      if (void 0 === j) {
        var n = !!t && !0 === t.reserveScrollBarGap,
          l = window.innerWidth - document.documentElement.clientWidth;
        if (n && l > 0) {
          var o = parseInt(
            window
              .getComputedStyle(document.body)
              .getPropertyValue('padding-right'),
            10
          );
          (j = document.body.style.paddingRight),
            (document.body.style.paddingRight = o + l + 'px');
        }
      }
      void 0 === F &&
        ((F = document.body.style.overflow),
        (document.body.style.overflow = 'hidden'));
    },
    K = function e() {
      void 0 !== j && ((document.body.style.paddingRight = j), (j = void 0)),
        void 0 !== F && ((document.body.style.overflow = F), (F = void 0));
    },
    X = function e() {
      return window.requestAnimationFrame(function () {
        if (void 0 === z) {
          z = {
            position: document.body.style.position,
            top: document.body.style.top,
            left: document.body.style.left,
          };
          var e = window,
            t = e.scrollY,
            n = e.scrollX,
            l = e.innerHeight;
          (document.body.style.position = 'fixed'),
            (document.body.style.top = -t),
            (document.body.style.left = -n),
            setTimeout(function () {
              return window.requestAnimationFrame(function () {
                var e = l - window.innerHeight;
                e && t >= l && (document.body.style.top = -(t + e));
              });
            }, 300);
        }
      });
    },
    N = function e() {
      if (void 0 !== z) {
        var t = -parseInt(document.body.style.top, 10),
          n = -parseInt(document.body.style.left, 10);
        (document.body.style.position = z.position),
          (document.body.style.top = z.top),
          (document.body.style.left = z.left),
          window.scrollTo(n, t),
          (z = void 0);
      }
    },
    Q = function e(t) {
      return !!t && t.scrollHeight - t.scrollTop <= t.clientHeight;
    },
    J = function e(t, n) {
      var l = t.targetTouches[0].clientY - Y;
      return (
        !G(t.target) &&
        ((n && 0 === n.scrollTop && l > 0) || (Q(n) && l < 0)
          ? U(t)
          : (t.stopPropagation(), !0))
      );
    },
    Z = function e(t, n) {
      if (!t) {
        console.error(
          'disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.'
        );
        return;
      }
      W.some(function (e) {
        return e.targetElement === t;
      }) ||
        ((W = [].concat(B(W), [{ targetElement: t, options: n || {} }])),
        R ? X() : V(n),
        !R ||
          ((t.ontouchstart = function (e) {
            1 === e.targetTouches.length && (Y = e.targetTouches[0].clientY);
          }),
          (t.ontouchmove = function (e) {
            1 === e.targetTouches.length && J(e, t);
          }),
          O ||
            (document.addEventListener(
              'touchmove',
              U,
              I ? { passive: !1 } : void 0
            ),
            (O = !0))));
    },
    ee = function e(t) {
      if (!t) {
        console.error(
          'enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.'
        );
        return;
      }
      (W = W.filter(function (e) {
        return e.targetElement !== t;
      })),
        R &&
          ((t.ontouchstart = null),
          (t.ontouchmove = null),
          O &&
            0 === W.length &&
            (document.removeEventListener(
              'touchmove',
              U,
              I ? { passive: !1 } : void 0
            ),
            (O = !1))),
        R ? N() : K();
    };
  function et() {
    return window.innerWidth - document.documentElement.clientWidth;
  }
  function en(e) {
    let t = et();
    (document.body.style.paddingRight = `${t}px`), Z(e);
  }
  function el(e) {
    (document.body.style.paddingRight = ''), ee(e);
  }
  MicroModal.init({ onShow: en, onClose: el });
  let eo = document.querySelector('.car-card');
  if (
    ((Datepicker.locales.ru = {
      days: [
        'ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ',
        'ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº',
        'ÐÑÐ¾ÑÐ½Ð¸Ðº',
        'Ð¡ÑÐµÐ´Ð°',
        'Ð§ÐµÑÐ²ÐµÑÐ³',
        'ÐÑÑÐ½Ð¸ÑÐ°',
        'Ð¡ÑÐ±Ð±Ð¾ÑÐ°',
      ],
      daysShort: ['ÐÐ¾Ñ', 'ÐÐ¾Ð½', 'ÐÑÐ¾', 'Ð¡ÑÐµ', 'Ð§ÐµÑ', 'ÐÑÑ', 'Ð¡ÑÐ±'],
      daysMin: ['ÐÑ', 'ÐÐ½', 'ÐÑ', 'Ð¡Ñ', 'Ð§Ñ', 'ÐÑ', 'Ð¡Ð±'],
      months: [
        'Ð¯Ð½Ð²Ð°ÑÑ',
        'Ð¤ÐµÐ²ÑÐ°Ð»Ñ',
        'ÐÐ°ÑÑ',
        'ÐÐ¿ÑÐµÐ»Ñ',
        'ÐÐ°Ð¹',
        'ÐÑÐ½Ñ',
        'ÐÑÐ»Ñ',
        'ÐÐ²Ð³ÑÑÑ',
        'Ð¡ÐµÐ½ÑÑÐ±ÑÑ',
        'ÐÐºÑÑÐ±ÑÑ',
        'ÐÐ¾ÑÐ±ÑÑ',
        'ÐÐµÐºÐ°Ð±ÑÑ',
      ],
      monthsShort: [
        'Ð¯Ð½Ð²',
        'Ð¤ÐµÐ²',
        'ÐÐ°Ñ',
        'ÐÐ¿Ñ',
        'ÐÐ°Ð¹',
        'ÐÑÐ½',
        'ÐÑÐ»',
        'ÐÐ²Ð³',
        'Ð¡ÐµÐ½',
        'ÐÐºÑ',
        'ÐÐ¾Ñ',
        'ÐÐµÐº',
      ],
      today: 'Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ',
      clear: 'ÐÑÐ¸ÑÑÐ¸ÑÑ',
      format: 'dd.mm.yyyy',
      weekStart: 1,
    }),
    eo)
  ) {
    let ei = document.getElementById('start-date'),
      ea = document.getElementById('end-date'),
      es = ei.nextElementSibling,
      er = ea.nextElementSibling,
      ec = new Date();
    ec.setHours(0, 0, 0, 0);
    let ed = new Datepicker(ei, { autohide: !0, minDate: ec, language: 'ru' }),
      ep = new Datepicker(ea, { autohide: !0, minDate: ec, language: 'ru' });
    (es.style.display = 'none'), (er.style.display = 'none');
    let eu = null,
      em = null;
    function eh(e, t) {
      if (!e || !t) return;
      let n = document.querySelectorAll('.datepicker .datepicker-days td');
      n.forEach((n) => {
        let l = new Date(n.dataset.date);
        l >= e && l <= t
          ? n.classList.add('highlight-range')
          : n.classList.remove('highlight-range');
      });
    }
    ei.addEventListener('changeDate', function () {
      (eu = ed.getDate()),
        console.log('Start Date Selected:', eu),
        eu && ((es.style.display = 'block'), ep.setDate(eu), ep.show());
    }),
      ea.addEventListener('changeDate', function () {
        (em = ep.getDate()),
          console.log('End Date Selected:', em),
          em && ((er.style.display = 'block'), eh(eu, em));
      }),
      es.addEventListener('click', function () {
        console.log('Reset Start Date'),
          (ei.value = ''),
          (ei.placeholder = 'ÐÐ°ÑÐ¸Ð½Ð°Ð½Ð¸Ðµ'),
          (es.style.display = 'none'),
          (ea.value = ''),
          (ea.placeholder = 'ÐÐ°Ð²ÐµÑÑÐµÐ½Ð¸Ðµ'),
          (er.style.display = 'none'),
          (eu = null),
          (em = null);
      }),
      er.addEventListener('click', function () {
        console.log('Reset End Date'),
          (ea.value = ''),
          (ea.placeholder = 'ÐÐ°Ð²ÐµÑÑÐµÐ½Ð¸Ðµ'),
          (er.style.display = 'none'),
          (em = null);
      }),
      ed.element.addEventListener('show', function () {
        eu && em && eh(eu, em);
      }),
      ep.element.addEventListener('show', function () {
        eu && em && eh(eu, em);
      });
    let eg = document.createElement('style');
    (eg.innerHTML = `
	  .highlight-range {
		 background-color: red !important;
		 color: white;
	  }
	`),
      document.head.appendChild(eg);
  }
  let ey = document.querySelector('.map-custom');
  if (ey) {
    ymaps.ready(ef);
    function ef() {
      var e = new ymaps.Map('map', {
          center: [62.035454, 129.675476],
          zoom: 13,
          controls: [],
        }),
        t = 'img/icons/custom-markers.svg';
      [
        {
          id: 1,
          name: 'BMW X3',
          coordinates: [62.035454, 129.675476],
          info: 'ÐÐ½ÐµÐ´Ð¾ÑÐ¾Ð¶Ð½Ð¸Ðº, 2020 Ð³Ð¾Ð´',
          imageUrl: 'img/cars/bmw-x3.png',
          details: [
            { label: 'Ð¦ÐµÐ½Ð°: ', value: '9 000 â½ / ÑÑÑÐºÐ¸ ' },
            { label: 'Ð¡ÑÐ°ÑÑÑ:', value: 'ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð° Ñ 31 ÑÐ½Ð²Ð°ÑÑ' },
          ],
        },
        {
          id: 2,
          name: 'ÐÐ°Ð·ÐµÐ»Ñ',
          coordinates: [62.045454, 129.685476],
          info: 'ÐÑÑÐ·Ð¾Ð²Ð¸Ðº, 2018 Ð³Ð¾Ð´',
          imageUrl: 'img/cars/bmw-x3.png',
          details: [
            { label: 'Ð¦ÐµÐ½Ð°: ', value: '9 000 â½ / ÑÑÑÐºÐ¸ ' },
            { label: 'Ð¡ÑÐ°ÑÑÑ:', value: 'ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð° Ñ 31 ÑÐ½Ð²Ð°ÑÑ' },
          ],
        },
      ].forEach(function (n) {
        var l = `
							  <div class="custom-balloon">
									<div class="custom-balloon__header">
										 <img src="${n.imageUrl}" alt="${n.name}" class="custom-balloon__image">
										 <p class="custom-balloon__name">${n.name}</p>
									</div>
									<div class="custom-balloon__content">
										 ${n.details
                       .map(
                         (e) => `
										 <div class="custom-balloon__item">
											  <div class="custom-balloon__label">${e.label}</div>
											  <div class="custom-balloon__value">${e.value}</div>
										 </div>`
                       )
                       .join('')}
									</div>
							  </div>
						 `,
          o = new ymaps.Placemark(
            n.coordinates,
            { balloonContent: l },
            {
              iconLayout: 'default#image',
              iconImageHref: t,
              iconImageSize: [70, 70],
              iconImageOffset: [-17, -49],
            }
          );
        o.events.add('mouseenter', function () {
          o.options.set('iconImageHref', 'img/icons/hover-custom-marker.svg'),
            o.options.set('iconImageSize', [70, 70]),
            o.options.set('iconImageOffset', [-17, -49]);
        }),
          o.events.add('mouseleave', function () {
            o.options.set('iconImageHref', t),
              o.options.set('iconImageSize', [70, 70]),
              o.options.set('iconImageOffset', [-17, -49]);
          }),
          e.geoObjects.add(o);
      });
    }
  }
  let ev = document.querySelector('.icon-menu'),
    e$ = document.querySelector('.menu__close');
  ev &&
    ev.addEventListener('click', () => {
      s();
    }),
    e$ &&
      e$.addEventListener('click', () => {
        r();
      });
  let eb = document.querySelector('.filter-btn'),
    eE = document.querySelector('.filter-block__close');
  eb &&
    eb.addEventListener('click', () => {
      document.documentElement.classList.add('filter-open'), i();
    }),
    eE &&
      eE.addEventListener('click', () => {
        document.documentElement.classList.remove('filter-open'), o();
      });
  let eL = { '.autopark__regions': new Set(), '.autopark__cars': new Set() };
  function e_(e) {
    let t = document.querySelector(e);
    if (t) {
      let n = t.querySelectorAll('button');
      n.forEach((n) => {
        let l = n.classList.contains('active');
        l && eL[e].add(n.textContent.trim());
        let o = document.createElement('input');
        (o.type = 'checkbox'),
          (o.id = n.textContent.trim()),
          (o.name = e.replace('.', '')),
          (o.value = n.textContent.trim()),
          o.classList.add('custom-checkbox');
        let i = document.createElement('label');
        (i.htmlFor = o.id),
          (i.textContent = n.textContent),
          i.classList.add('custom-label'),
          o.addEventListener('change', () => {
            if (
              (o.checked
                ? i.classList.add('checked-label')
                : i.classList.remove('checked-label'),
              'ÐÑÐµ ÑÐµÐ³Ð¸Ð¾Ð½Ñ' === n.textContent.trim())
            ) {
              let e = t.querySelectorAll('input[type="checkbox"]');
              e.forEach((e) => {
                e !== o &&
                  ((e.checked = o.checked),
                  e.dispatchEvent(new Event('change')));
              });
            }
          });
        let a = n.parentElement;
        (a.innerHTML = ''), a.appendChild(o), a.appendChild(i);
      });
    }
  }
  function eS(e) {
    let t = document.querySelector(e);
    if (t) {
      let n = t.querySelectorAll('input[type="checkbox"]');
      n.forEach((t) => {
        let n = document.createElement('button');
        (n.textContent = t.value),
          eL[e].has(n.textContent.trim()) && n.classList.add('active');
        let l = t.parentElement;
        (l.innerHTML = ''), l.appendChild(n);
      });
    }
  }
  function ew() {
    window.innerWidth <= 768
      ? (e_('.autopark__regions'), e_('.autopark__cars'))
      : (eS('.autopark__regions'), eS('.autopark__cars'));
  }
  window.addEventListener('resize', ew),
    document.addEventListener('DOMContentLoaded', ew),
    document.querySelector('.file-upload-container') &&
      document.querySelectorAll('.file-upload-container').forEach((e) => {
        let t = e.querySelector('.file-upload-input'),
          n = e.querySelector('.file-upload-filename');
        e.addEventListener('click', (e) => {
          e.target !== t && t.click();
        }),
          t.addEventListener('change', () => {
            let e = t.files.length ? t.files[0].name : 'No file chosen';
            n.textContent = e;
          });
      });
  let ek = document.querySelectorAll('.customSwitch');
  ek &&
    ek.forEach((e) => {
      e.addEventListener('change', function () {
        let e = this.closest('.switch-container');
        this.checked ? e.classList.add('active') : e.classList.remove('active');
      });
    });
  let e8 = document.querySelector('.booking-notification__close'),
    ex = document.querySelector('.car-card__info-details'),
    eq = document.querySelector('.booking-notification');
  ex &&
    (ex.addEventListener('mouseenter', () => {
      eq.style.display = 'flex';
    }),
    ex.addEventListener('click', () => {
      eq.style.display = 'flex';
    })),
    e8 &&
      e8.addEventListener('click', () => {
        eq.style.display = 'none';
      }),
    document.addEventListener('DOMContentLoaded', function () {
      let e = document.querySelectorAll('.password-input'),
        t = document.querySelectorAll('.password-toggle');
      console.log(t),
        console.log(e),
        t.forEach((t, n) => {
          e[n] &&
            t.addEventListener('click', function (l) {
              l.preventDefault();
              let o = e[n],
                i = t.querySelector('img');
              'password' === o.type
                ? ((o.type = 'text'),
                  (i.src = 'img/icons/eye.svg'),
                  (i.alt = 'Ð¡ÐºÑÑÑÑ'))
                : ((o.type = 'password'),
                  (i.src = 'img/icons/eye-slash.svg'),
                  (i.alt = 'ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ'));
            });
        });
    }),
    (window.FLS = !1),
    a(),
    u();
})();
